import axios from "axios";
import { get } from "../../../services/api";

export const get_vegetable_early_warnings = async () => {
  const token =
    "";
  try {
    //const { httpCode, payloadDto } = await get("vegetable-early-warnings",true);
    const res = await axios.get(
      "http://43.205.74.219:9090/api/v1/crop-look/vegetable-early-warnings",
        {
            headers: {
                Authorization: `Bearer ${token}`,
            }
        }    

    );

    console.log("tt",res)
    if (res?.data?.httpCode === "200 OK") {
      return {
        dataList: res?.data?.payloadDto,
      };
    }
    return {
      dataList: [],
    };
  } catch (error) {
    console.log(error);
    return {
      dataList: [],
    };
  }
};
